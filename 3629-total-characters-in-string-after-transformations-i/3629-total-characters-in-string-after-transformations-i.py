from collections import Counter
class Solution:
    def lengthAfterTransformations(self, s: str, t: int) -> int:
        """
            Define a method that will take the character and the value 't'
            and it will give the final output of the length of the string
            generated by performing 't' transformation on that character after
            modding it by the MOD
        """

        MOD = ((10 ** 9) + 7)
        char_count = Counter(s)
        dp = [0] * 26
        for key, val in char_count.items():
            dp[ord(key) - ord('a')] = val
        

        """
            Maintain the count of each characters.

            Maintain the dp state for each characters and keep updating that 
            dp state as we transform?

        """
        for i in range(t):
            temp = dp[25]
            for j in range(24, -1, -1):
                dp[j + 1] = dp[j]
            dp[0] = temp
            dp[1] = (dp[1] + temp) % MOD
        
        answer = 0
        # print(dp)
        for k in range(26):
            answer = (answer + dp[k]) % MOD
        
        return answer

        